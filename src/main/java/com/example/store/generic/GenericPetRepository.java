package com.example.store.generic;

import com.example.store.base.Fish;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.SqlParameterValue;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;

@Repository
public class GenericPetRepository {

    @Autowired
    private NamedParameterJdbcTemplate jdbcTemplate;

    @Transactional
    public <T> void storeGenericPet(final GenericPet<T> genericPet) {

        if (genericPet.getPet() instanceof Fish) {
            // When the id should be auto generated by the db:
            // https://stackoverflow.com/questions/14537546/how-to-get-generated-id-after-i-inserted-into-a-new-data-record-in-database-usin
            // https://www.baeldung.com/spring-jdbc-autogenerated-keys
            final Fish fish = (Fish) genericPet.getPet();
            String sql = "INSERT INTO FISH (ID, NAME) VALUES (:id, :name)";
            this.jdbcTemplate.update(sql, new MapSqlParameterSource()
                    .addValue("id", new SqlParameterValue(Types.BIGINT, fish.getId()))
                    .addValue("name", new SqlParameterValue(Types.VARCHAR, fish.getName())));

            sql = "INSERT INTO GENERIC_PET (ID, FISH_ID) VALUES (:id, :fish_id)";
            this.jdbcTemplate.update(sql, new MapSqlParameterSource()
                    .addValue("id", new SqlParameterValue(Types.BIGINT, genericPet.getId()))
                    .addValue("fish_id", new SqlParameterValue(Types.BIGINT, fish.getId())));
        }

    }

    @Transactional
    public List<GenericPet<Fish>> getAllFishes() {
        final String sql = "SELECT GP.ID, F.ID, F.NAME FROM GENERIC_PET GP LEFT JOIN FISH F ON GP.FISH_ID = F.ID";
        return this.jdbcTemplate.query(sql, new FishPetMapper());
    }

    static class FishPetMapper implements RowMapper<GenericPet<Fish>> {

        @Override
        public GenericPet<Fish> mapRow(final ResultSet rs, final int rowNum) throws SQLException {
            final Fish fish = new Fish();
            fish.setId(rs.getLong(2));
            fish.setName(rs.getString(3));

            final GenericPet<Fish> pet = new GenericPet<>();
            pet.setPet(fish);
            pet.setId(rs.getLong(1));
            return pet;
        }
    }

}
